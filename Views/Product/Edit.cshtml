@model Neel.Models.ProductModel
@{
    Layout = "~/Views/Shared/_Admin.cshtml";
}
<script src="~/Scripts/jquery-3.3.1.js"></script>
<script src="~/Scripts/jquery-ui-1.10.2.js"></script>
<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/AjaxModules.js"></script>

<script type="text/javascript">
    // main picture
    function uploadPicture(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#productPicture')
                    .attr('src', e.target.result)
                    .width(300)
                    .height(300);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
    // picture 1
    function uploadPicture1(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#productPicture1')
                    .attr('src', e.target.result)
                    .width(300)
                    .height(300);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
    // picture 2
    function uploadPicture2(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#productPicture2')
                    .attr('src', e.target.result)
                    .width(300)
                    .height(300);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
    // picture 3
    function uploadPicture3(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#productPicture3')
                    .attr('src', e.target.result)
                    .width(300)
                    .height(300);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
    // picture 4
    function uploadPicture4(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#productPicture4')
                    .attr('src', e.target.result)
                    .width(300)
                    .height(300);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>
<script type="text/javascript">
    SetIntegerIndian("Like");
    SetIntegerIndian("DisLike");
    SetIntegerIndian("View");
    SetIntegerIndian("Rating");
    SetInputNumericIndian("Rate");
    SetInputNumericIndian("MRP");
    SetIntegerIndian("StockQty");
    SetIntegerIndian("AlertStockQty");
    SetInputNumericIndian("DeliveryCharge");


    function FormValidation() {
        RemoveIndianCulture("Like");
        RemoveIndianCulture("DisLike");
        RemoveIndianCulture("View");
        RemoveIndianCulture("Rating");
        RemoveIndianCulture("Rate");
        RemoveIndianCulture("MRP");
        RemoveIndianCulture("StockQty");
        RemoveIndianCulture("AlertStockQty");
        RemoveIndianCulture("DeliveryCharge");
    }
</script>

<div class="page-header">
    <div class="card">
        <div class="card-block bg-primary">
            <div class="row ">
                <div class="col-lg-4">
                    <h5 class="text-uppercase font-weight-bold">Update Product</h5>
                </div>
                <div class="col-lg-8 align-items-end">
                    <div class="page-header-breadcrumb">
                        <ul class="breadcrumb-title">
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index", "Dashboard")"> <i class="icofont icofont-home" style="color:white"></i> </a>
                            </li>
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index", "Product")" style="color:white">Home / Masters / Update Product</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row animate bounceInDown">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col-md-9 col-9"><h3>@ViewData["PageTitle"]</h3></div>
                    <div class="col-md-3 col-3">
                        <a href="@Url.Action("Index", "Product")" class="btn btn-primary btn-outline-primary float-right">
                            <i class="icofont icofont-user-alt-3"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>

            <div class="card-block">
                <h4 class="sub-title">Product Update</h4>
                @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ProductID)

                    <h4 class="sub-title" style="color:darkmagenta">Product Info</h4>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.BrandID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.BrandID,
                             Neel.Controllers.ProductController.GetBrandList(), new { @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.BrandID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.FullDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FullDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FullDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.CategoryID,
                             Neel.Controllers.ProductController.GetCategoryList(), new { @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.UnitID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.UnitID,
                             Neel.Controllers.ProductController.GetUnitList(), new { @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.UnitID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <h4 class="sub-title" style="color:darkmagenta">Product Pricing</h4>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.MRP, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.MRP, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MRP, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.DeliveryCharge, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.DeliveryCharge, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DeliveryCharge, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.DisplayOn, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:red" })
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.DisplayOn,
                             Neel.Controllers.ProductController.GetDisplayOnList(), new { @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.DisplayOn, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.StockQty, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.StockQty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StockQty, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.AlertStockQty, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.AlertStockQty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.AlertStockQty, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.GSTInclusive, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <div class="checkbox">
                                <label>@Html.CheckBoxFor(model => model.GSTInclusive)&nbsp;Yes</label>
                            </div>
                            @Html.ValidationMessageFor(model => model.GSTInclusive, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.GSTSlabID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.GSTSlabID,
                             Neel.Controllers.ProductController.GetGSTSlabList(), new { @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.GSTSlabID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <h4 class="sub-title" style="color:darkmagenta">Product Shopping</h4>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.IsNew, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <div class="checkbox">
                                <label>@Html.CheckBoxFor(model => model.IsNew)&nbsp;Yes</label>
                            </div>
                            @Html.ValidationMessageFor(model => model.IsNew, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.IsSeal, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <div class="checkbox">
                                <label>@Html.CheckBoxFor(model => model.IsSeal)&nbsp;Yes</label>
                            </div>
                            @Html.ValidationMessageFor(model => model.IsSeal, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.View, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.View, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                            @Html.ValidationMessageFor(model => model.View, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                            @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Like, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Like, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                            @Html.ValidationMessageFor(model => model.Like, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.DisLike, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.DisLike, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                            @Html.ValidationMessageFor(model => model.DisLike, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <h4 class="sub-title" style="color:darkmagenta">Product Pictures</h4>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <p>Product Picture 1000px X 1000px</p>
                            <img id="productPicture" src="~/UploadFiles/@Url.Content(Model.Picture)" alt="" class="img-fluid img-thumbnail" />
                        </div>
                        <div class="col-md-4">
                            <input type='file' name="FileUpload" onchange="uploadPicture(this);" class="btn btn-success pull-right" />
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Picture1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <p>Product Picture 1000px X 1000px</p>
                            <img id="productPicture1" src="~/UploadFiles/@Url.Content(Model.Picture1)" alt="" class="img-fluid img-thumbnail" />
                        </div>
                        <div class="col-md-4">
                            <input type='file' name="FileUpload1" onchange="uploadPicture1(this);" class="btn btn-success pull-right" />
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Picture2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <p>Product Picture 1000px X 1000px</p>
                            <img id="productPicture2" src="~/UploadFiles/@Url.Content(Model.Picture2)" alt="" class="img-fluid img-thumbnail" />
                        </div>
                        <div class="col-md-4">
                            <input type='file' name="FileUpload2" onchange="uploadPicture2(this);" class="btn btn-success pull-right" />
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Picture3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <p>Product Picture 1000px X 1000px</p>
                            <img id="productPicture3" src="~/UploadFiles/@Url.Content(Model.Picture3)" alt="" class="img-fluid img-thumbnail" />
                        </div>
                        <div class="col-md-4">
                            <input type='file' name="FileUpload3" onchange="uploadPicture3(this);" class="btn btn-success pull-right" />
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Picture4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            <p>Product Picture 1000px X 1000px</p>
                            <img id="productPicture4" src="~/UploadFiles/@Url.Content(Model.Picture4)" alt="" class="img-fluid img-thumbnail" />
                        </div>
                        <div class="col-md-4">
                            <input type='file' name="FileUpload4" onchange="uploadPicture4(this);" class="btn btn-success pull-right" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-12">
                            <input type="submit" value="Update" onclick="FormValidation();" class="btn btn-primary btn-out float-right" />
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>
